/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AldOptionItem, BadgeVariant, ButtonSize, ButtonVariant, IconClass, IconPosition, IconSize } from "./utils/types";
export namespace Components {
    interface AldBadge {
        /**
          * Adding an action icon to the badge renders a button, making it an actionable badge, AKA; a "chip".
         */
        "actionIcon"?: string;
        /**
          * Icon class for the action icon. Defaults to the default ald-icon class.
         */
        "actionIconClass"?: IconClass;
        /**
          * In addition to the action icon, passing an array of options to the badge will render a dropdown menu instead of a button.
         */
        "actionOptions"?: AldOptionItem[];
        /**
          * The icon to show inside the badge (optional, but should have a label or an icon). If used with a label, the icon is positioned left of the label.
         */
        "icon"?: string;
        /**
          * Icon class for the icon. Defaults to the ald-icon default (material-symbols-rounded).
         */
        "iconClass"?: IconClass;
        /**
          * Text to show inside the badge (optional, but should have a label or an icon).
         */
        "label"?: string;
        /**
          * Low Contrast reduces the tone of the badge, where less emphasis is required, defaults to false.
         */
        "lowContrast"?: boolean;
        /**
          * Adds the full rounded style to the badge, defaults to false, but with minor rounded corners.
         */
        "rounded"?: boolean;
        /**
          * The Badge size, defaults to "md" (optional).
         */
        "size"?: 'xs' | 'sm' | 'md';
        /**
          * The Badge style variant, defaults to "default".
         */
        "variant"?: BadgeVariant;
    }
    interface AldButton {
        /**
          * Sets the button state to disabled.
         */
        "disabled"?: boolean;
        /**
          * Fits to the full width of their container
         */
        "fullwidth"?: boolean;
        /**
          * Optionally give it an icon - use the icon name/class.
         */
        "icon"?: string;
        /**
          * Specify the icon class to use. Default is "material-symbols-rounded".
         */
        "iconClass"?: IconClass;
        /**
          * Specify the icon position. Default is "left".
         */
        "iconPosition"?: IconPosition;
        /**
          * The button label.
         */
        "label": string | number;
        /**
          * Sets the button to a loading state - with spinning hedgehogs.
         */
        "loading"?: boolean;
        /**
          * Sets the button state to selected. This is used in button groups with toggle.
         */
        "selected"?: boolean;
        /**
          * Specify a button size. Default is medium: "md".
         */
        "size"?: ButtonSize;
        /**
          * The button element type.
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * The button variant and style.
         */
        "variant"?: ButtonVariant;
    }
    interface AldIcon {
        "color"?: string;
        "icon": string;
        "iconClass"?: IconClass;
        "opacity"?: number;
        "size"?: IconSize;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface OtherComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface AldBadgeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAldBadgeElement;
}
declare global {
    interface HTMLAldBadgeElement extends Components.AldBadge, HTMLStencilElement {
    }
    var HTMLAldBadgeElement: {
        prototype: HTMLAldBadgeElement;
        new (): HTMLAldBadgeElement;
    };
    interface HTMLAldButtonElement extends Components.AldButton, HTMLStencilElement {
    }
    var HTMLAldButtonElement: {
        prototype: HTMLAldButtonElement;
        new (): HTMLAldButtonElement;
    };
    interface HTMLAldIconElement extends Components.AldIcon, HTMLStencilElement {
    }
    var HTMLAldIconElement: {
        prototype: HTMLAldIconElement;
        new (): HTMLAldIconElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLOtherComponentElement extends Components.OtherComponent, HTMLStencilElement {
    }
    var HTMLOtherComponentElement: {
        prototype: HTMLOtherComponentElement;
        new (): HTMLOtherComponentElement;
    };
    interface HTMLElementTagNameMap {
        "ald-badge": HTMLAldBadgeElement;
        "ald-button": HTMLAldButtonElement;
        "ald-icon": HTMLAldIconElement;
        "my-component": HTMLMyComponentElement;
        "other-component": HTMLOtherComponentElement;
    }
}
declare namespace LocalJSX {
    interface AldBadge {
        /**
          * Adding an action icon to the badge renders a button, making it an actionable badge, AKA; a "chip".
         */
        "actionIcon"?: string;
        /**
          * Icon class for the action icon. Defaults to the default ald-icon class.
         */
        "actionIconClass"?: IconClass;
        /**
          * In addition to the action icon, passing an array of options to the badge will render a dropdown menu instead of a button.
         */
        "actionOptions"?: AldOptionItem[];
        /**
          * The icon to show inside the badge (optional, but should have a label or an icon). If used with a label, the icon is positioned left of the label.
         */
        "icon"?: string;
        /**
          * Icon class for the icon. Defaults to the ald-icon default (material-symbols-rounded).
         */
        "iconClass"?: IconClass;
        /**
          * Text to show inside the badge (optional, but should have a label or an icon).
         */
        "label"?: string;
        /**
          * Low Contrast reduces the tone of the badge, where less emphasis is required, defaults to false.
         */
        "lowContrast"?: boolean;
        /**
          * This will fire the event on action button or dropdown menu item click, returning void, or the selected item and index.
         */
        "onDidAction"?: (event: AldBadgeCustomEvent<void | {option: AldOptionItem, index: number}>) => void;
        /**
          * Adds the full rounded style to the badge, defaults to false, but with minor rounded corners.
         */
        "rounded"?: boolean;
        /**
          * The Badge size, defaults to "md" (optional).
         */
        "size"?: 'xs' | 'sm' | 'md';
        /**
          * The Badge style variant, defaults to "default".
         */
        "variant"?: BadgeVariant;
    }
    interface AldButton {
        /**
          * Sets the button state to disabled.
         */
        "disabled"?: boolean;
        /**
          * Fits to the full width of their container
         */
        "fullwidth"?: boolean;
        /**
          * Optionally give it an icon - use the icon name/class.
         */
        "icon"?: string;
        /**
          * Specify the icon class to use. Default is "material-symbols-rounded".
         */
        "iconClass"?: IconClass;
        /**
          * Specify the icon position. Default is "left".
         */
        "iconPosition"?: IconPosition;
        /**
          * The button label.
         */
        "label"?: string | number;
        /**
          * Sets the button to a loading state - with spinning hedgehogs.
         */
        "loading"?: boolean;
        /**
          * Sets the button state to selected. This is used in button groups with toggle.
         */
        "selected"?: boolean;
        /**
          * Specify a button size. Default is medium: "md".
         */
        "size"?: ButtonSize;
        /**
          * The button element type.
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * The button variant and style.
         */
        "variant"?: ButtonVariant;
    }
    interface AldIcon {
        "color"?: string;
        "icon"?: string;
        "iconClass"?: IconClass;
        "opacity"?: number;
        "size"?: IconSize;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface OtherComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "ald-badge": AldBadge;
        "ald-button": AldButton;
        "ald-icon": AldIcon;
        "my-component": MyComponent;
        "other-component": OtherComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ald-badge": LocalJSX.AldBadge & JSXBase.HTMLAttributes<HTMLAldBadgeElement>;
            "ald-button": LocalJSX.AldButton & JSXBase.HTMLAttributes<HTMLAldButtonElement>;
            "ald-icon": LocalJSX.AldIcon & JSXBase.HTMLAttributes<HTMLAldIconElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "other-component": LocalJSX.OtherComponent & JSXBase.HTMLAttributes<HTMLOtherComponentElement>;
        }
    }
}
